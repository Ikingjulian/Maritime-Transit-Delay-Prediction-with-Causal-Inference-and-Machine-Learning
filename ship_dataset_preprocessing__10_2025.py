# -*- coding: utf-8 -*-
"""ship_dataset_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M2m3ShUG-LLboIGuExbxiADTaXhTxait
"""

!pip install kaggle

import os
from google.colab import userdata

# Create the .kaggle directory and kaggle.json file
!mkdir ~/.kaggle
with open('/root/.kaggle/kaggle.json', 'w') as f:
    f.write(userdata.get('KAGGLE_JSON'))

# Set permissions for the kaggle.json file
!chmod 600 ~/.kaggle/kaggle.json

# Download the dataset
!kaggle datasets download -d nish8090/preprocessed-kattegat-strait-ship-dataset

# Unzip the downloaded dataset
!unzip preprocessed-kattegat-strait-ship-dataset.zip

import pandas as pd

ship_df = pd.read_csv('combined_dataset.csv')
ship_df.head()

!pip install causalml

!pip install dowhy

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
import dowhy
from dowhy import CausalModel
from sklearn import preprocessing

# Define the treatment and outcome variables
# Outcome variable(s)= transit delay, Treatment variable(s) = Latitude ,Longitude , Confounding variables = remaining variables
# Based on the user's definition:
# Outcome variable (y): 'transit delay'
# Treatment variables (treatment): 'Latitude', 'Longitude'
# Confounding variables (X): Remaining variables in ship_df

# Drop the outcome and treatment variables to get the confounding variables
X = ship_df.drop(columns=['transit delay', 'Latitude', 'Longitude'])  # Features (confounding variables)
treatment = ship_df[['Latitude', 'Longitude']] # define your treatment column here
y = ship_df['transit delay']  # Target variable (outcome)

# Split the data
X_train, X_test, treatment_train, treatment_test, y_train, y_test = train_test_split(
    X, treatment, y, test_size=0.2, random_state=42
)

#  Convert treatment_train to string (Note: This might not be appropriate for multiple continuous treatments in UpliftTreeClassifier)
#  UpliftTreeClassifier typically works with binary or categorical treatments.
#  For continuous treatments like Latitude and Longitude, a different causal inference method might be more suitable.
#  However, following the provided code structure, I will keep the conversion, but be aware of this limitation.
treatment_train_str = treatment_train.astype(str)

from causalml.inference.tree import UpliftTreeClassifier

# Initialize UpliftTreeClassifier
# control_name should be one of the unique values in treatment_train_str
# max_depth, min_samples_leaf, min_samples_treatment, n_reg can be adjusted
# FIX: Select a single string value from the first row for control_name
uplift_model = UpliftTreeClassifier(control_name=treatment_train_str.iloc[0].astype(str).values[0], max_depth=3, min_samples_leaf=100, min_samples_treatment=10, n_reg=100)


# Fit the model
# Note: Fitting UpliftTreeClassifier with multi-column continuous treatments might not work as expected.
# Consider using a different EconML model more suitable for continuous treatments.
uplift_model.fit(X_train, treatment_train_str, y_train)

# Step 7: Predict treatment effects on the test set
# Note: Predicting uplift scores with multi-column continuous treatments might not be directly supported by predict method of UpliftTreeClassifier
# Consider using a different EconML model for prediction with continuous treatments.
uplift_scores = uplift_model.predict(X_test.values)
display(uplift_scores)

import dowhy
from dowhy import CausalModel

# Define the causal model
# Replace 'treatment_variable', 'outcome_variable', and 'confounding_variables'
# with the actual variable names from your dataset.
# For example, if you want to study the effect of 'SOG' on 'transit delay'
# and consider 'Type of mobile' as a confounder, you would write:
# causal_graph = """
# digraph {
# treatment_variable -> outcome_variable;
# confounding_variables -> treatment_variable;
# confounding_variables -> outcome_variable;
# }
# """
# You can also define a more complex graph based on your understanding of the data.

causal_graph = """
digraph {
Latitude -> transit delay;
Longitude -> transit delay;
"Type of mobile" -> Latitude; "Type of mobile" -> Longitude; "Type of mobile" -> "transit delay";
MMSI -> Latitude; MMSI -> Longitude; MMSI -> "transit delay";
"Navigational status" -> Latitude; "Navigational status" -> Longitude; "Navigational status" -> "transit delay";
ROT -> Latitude; ROT -> Longitude; ROT -> "transit delay";
SOG -> Latitude; SOG -> Longitude; SOG -> "transit delay";
COG -> Latitude; COG -> Longitude; COG -> "transit delay";
Heading -> Latitude; Heading -> Longitude; Heading -> "transit delay";
"True Heading" -> Latitude; "True Heading" -> Longitude; "True Heading" -> "transit delay";
"Rate of Turn" -> Latitude; "Rate of Turn" -> Longitude; "Rate of Turn" -> "transit delay";
"Speed Over Ground" -> Latitude; "Speed Over Ground" -> Longitude; "Speed Over Ground" -> "transit delay";
"Course Over Ground" -> Latitude; "Course Over Ground" -> Longitude; "Course Over Ground" -> "transit delay";
"Timestamp of Data" -> Latitude; "Timestamp of Data" -> Longitude; "Timestamp of Data" -> "transit delay";
"Type of Ship" -> Latitude; "Type of Ship" -> Longitude; "Type of Ship" -> "transit delay";
"Dimension A" -> Latitude; "Dimension A" -> Longitude; "Dimension A" -> "transit delay";
"Dimension B" -> Latitude; "Dimension B" -> Longitude; "Dimension B" -> "transit delay";
"Dimension C" -> Latitude; "Dimension C" -> Longitude; "Dimension C" -> "transit delay";
"Dimension D" -> Latitude; "Dimension D" -> Longitude; "Dimension D" -> "transit delay";
Width -> Latitude; Width -> Longitude; Width -> "transit delay";
Length -> Latitude; Length -> Longitude; Length -> "transit delay";
"Type of position fixing device" -> Latitude; "Type of position fixing device" -> Longitude; "Type of position fixing device" -> "transit delay";
Draught -> Latitude; Draught -> Longitude; Draught -> "transit delay";
Destination -> Latitude; Destination -> Longitude; Destination -> "transit delay";
A -> Latitude; A -> Longitude; A -> "transit delay";
B -> Latitude; B -> Longitude; B -> "transit delay";
C -> Latitude; C -> Longitude; C -> "transit delay";
D -> Latitude; D -> Longitude; D -> "transit delay";
}
"""


model = CausalModel(
    data=ship_df,
    graph=causal_graph.replace("\n", " "),
    treatment=['Latitude', 'Longitude'],
    outcome=['transit delay']
)

# You can visualize the model (requires graphviz)
# model.view_graph()



"""# Task
Apply EconML on the ship dataset ("https://www.kaggle.com/datasets/nish8090/preprocessed-kattegat-strait-ship-dataset") using 'transit delay' as the outcome variable, 'Latitude' and 'Longitude' as treatment variables, and the remaining variables as confounding variables.

## Install econml

### Subtask:
Install the EconML library.

**Reasoning**:
The subtask is to install the EconML library. I will use pip to install the package.
"""

!pip install econml

"""## Data preprocessing

### Subtask:
Prepare the data for EconML, including handling categorical variables and splitting the data if necessary.

**Reasoning**:
Identify categorical columns, apply one-hot encoding, and separate the data into outcome, treatment, and confounding variables as instructed.
"""

# Identify categorical columns
categorical_cols = ship_df.select_dtypes(include=['object']).columns.tolist()
print(f"Categorical columns: {categorical_cols}")

# Apply one-hot encoding
ship_df_encoded = pd.get_dummies(ship_df, columns=categorical_cols, drop_first=True)

# Separate into outcome, treatment, and confounding variables
y = ship_df_encoded['transit delay']
T = ship_df_encoded[['Latitude', 'Longitude']]
X = ship_df_encoded.drop(columns=['transit delay', 'Latitude', 'Longitude'])

display(y.head())
display(T.head())
display(X.head())

"""## Define the econml model

### Subtask:
Choose and define an appropriate EconML model based on the nature of your treatment and outcome variables.

**Reasoning**:
Choose and define an appropriate EconML model based on the nature of the treatment and outcome variables. Instantiate the chosen EconML model, specifying the models for outcome and treatment functions, and setting a random state for reproducibility.
"""

from econml.dml import LinearDML
from sklearn.ensemble import RandomForestRegressor

# Choose and instantiate the EconML model
# LinearDML is suitable for continuous treatments and outcomes.
# Using RandomForestRegressor for the model_y and model_T
model = LinearDML(
    model_y=RandomForestRegressor(random_state=42),
    model_t=RandomForestRegressor(random_state=42),
    random_state=42
)

print("EconML model defined:")
print(model)

"""## Train the model

### Subtask:
Fit the EconML model to your data.

**Reasoning**:
Fit the defined EconML model using the preprocessed confounding variables (X), treatment variables (T), and outcome variable (y).
"""

model.fit(y, T, X=X)

print("EconML model fitted.")

"""**Reasoning**:
The previous attempt to fit the model failed because the variables y, T, and X were not available in the current session. Re-define these variables from the preprocessed dataframe and then fit the model.


"""

# Identify categorical columns
categorical_cols = ship_df.select_dtypes(include=['object']).columns.tolist()

# Apply one-hot encoding
ship_df_encoded = pd.get_dummies(ship_df, columns=categorical_cols, drop_first=True)

# Separate into outcome, treatment, and confounding variables
y = ship_df_encoded['transit delay']
T = ship_df_encoded[['Latitude', 'Longitude']]
X = ship_df_encoded.drop(columns=['transit delay', 'Latitude', 'Longitude'])

# Fit the model again
model.fit(y, T, X=X)

print("EconML model fitted.")

"""**Reasoning**:
The previous attempt failed because the dataframe `ship_df` was not available in the current session. Load the dataframe again from the csv file and then proceed with preprocessing and fitting the model.


"""